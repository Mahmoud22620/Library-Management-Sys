// <auto-generated />
using System;
using Library_Management_Sys.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library_Management_Sys.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20251002093746_V")]
    partial class V
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsAuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BooksBookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsAuthorId", "BooksBookId");

                    b.HasIndex("BooksBookId");

                    b.ToTable("BookAuthors", (string)null);
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Bio = "British author best known for the Harry Potter fantasy series.",
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            AuthorId = 2,
                            Bio = "American author of horror, supernatural fiction, suspense, crime, science-fiction, and fantasy novels.",
                            Name = "Stephen King"
                        },
                        new
                        {
                            AuthorId = 3,
                            Bio = "English writer known for her detective novels, particularly those featuring Hercule Poirot and Miss Marple.",
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            AuthorId = 4,
                            Bio = "English novelist and essayist, journalist and critic, whose work is characterised by lucid prose.",
                            Name = "George Orwell"
                        },
                        new
                        {
                            AuthorId = 5,
                            Bio = "English novelist known primarily for her six major novels which interpret the British landed gentry.",
                            Name = "Jane Austen"
                        },
                        new
                        {
                            AuthorId = 6,
                            Bio = "American writer, humorist, entrepreneur, publisher, and lecturer.",
                            Name = "Mark Twain"
                        },
                        new
                        {
                            AuthorId = 7,
                            Bio = "English writer and social critic who created some of the world's best-known fictional characters.",
                            Name = "Charles Dickens"
                        },
                        new
                        {
                            AuthorId = 8,
                            Bio = "American novelist, short-story writer, and journalist.",
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            AuthorId = 9,
                            Bio = "American novelist and short story writer, widely regarded as one of the greatest American writers of the 20th century.",
                            Name = "F. Scott Fitzgerald"
                        },
                        new
                        {
                            AuthorId = 10,
                            Bio = "American novelist widely known for To Kill a Mockingbird.",
                            Name = "Harper Lee"
                        },
                        new
                        {
                            AuthorId = 11,
                            Bio = "English author, poet, philologist, and university professor, best known for The Hobbit and The Lord of the Rings.",
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            AuthorId = 12,
                            Bio = "American author best known for his thriller novels, including the Robert Langdon novels.",
                            Name = "Dan Brown"
                        },
                        new
                        {
                            AuthorId = 13,
                            Bio = "Brazilian lyricist and novelist, best known for his novel The Alchemist.",
                            Name = "Paulo Coelho"
                        },
                        new
                        {
                            AuthorId = 14,
                            Bio = "Colombian novelist, short-story writer, screenwriter, and journalist.",
                            Name = "Gabriel García Márquez"
                        },
                        new
                        {
                            AuthorId = 15,
                            Bio = "American novelist, essayist, book editor, and college professor.",
                            Name = "Toni Morrison"
                        });
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            CategoryId = 6,
                            CoverImage = "harrypotter1.jpg",
                            Edition = "1st Edition",
                            ISBN = "9780747532699",
                            Language = "English",
                            PublisherId = 1,
                            Status = 0,
                            Summary = "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts.",
                            Title = "Harry Potter and the Philosopher's Stone",
                            Year = 1997
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            CategoryId = 10,
                            CoverImage = "theshining.jpg",
                            Edition = "1st Edition",
                            ISBN = "9780385121675",
                            Language = "English",
                            PublisherId = 2,
                            Status = 0,
                            Summary = "A family heads to an isolated hotel for the winter where a sinister presence influences the father into violence.",
                            Title = "The Shining",
                            Year = 1977
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3,
                            CategoryId = 7,
                            CoverImage = "orientexpress.jpg",
                            Edition = "Reprint Edition",
                            ISBN = "9780062693662",
                            Language = "English",
                            PublisherId = 2,
                            Status = 0,
                            Summary = "Detective Hercule Poirot investigates a murder aboard the famous European train.",
                            Title = "Murder on the Orient Express",
                            Year = 1934
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            CategoryId = 9,
                            CoverImage = "1984.jpg",
                            Edition = "Signet Classic",
                            ISBN = "9780451524935",
                            Language = "English",
                            PublisherId = 3,
                            Status = 0,
                            Summary = "In a totalitarian future society, Winston Smith works for the Ministry of Truth and falls in love with Julia.",
                            Title = "1984",
                            Year = 1949
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            CategoryId = 8,
                            CoverImage = "prideandprejudice.jpg",
                            Edition = "Penguin Classics",
                            ISBN = "9780141439518",
                            Language = "English",
                            PublisherId = 1,
                            Status = 0,
                            Summary = "The romantic clash between the opinionated Elizabeth Bennet and her proud beau, Mr. Darcy.",
                            Title = "Pride and Prejudice",
                            Year = 1813
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6,
                            CategoryId = 1,
                            CoverImage = "tomsawyer.jpg",
                            Edition = "Dover Thrift Editions",
                            ISBN = "9780486400778",
                            Language = "English",
                            PublisherId = 4,
                            Status = 0,
                            Summary = "The adventures of a young boy growing up along the Mississippi River.",
                            Title = "The Adventures of Tom Sawyer",
                            Year = 1876
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 7,
                            CategoryId = 1,
                            CoverImage = "taleoftwocities.jpg",
                            Edition = "Dover Thrift Editions",
                            ISBN = "9780486406510",
                            Language = "English",
                            PublisherId = 4,
                            Status = 0,
                            Summary = "A historical novel set in London and Paris before and during the French Revolution.",
                            Title = "A Tale of Two Cities",
                            Year = 1859
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 8,
                            CategoryId = 1,
                            CoverImage = "oldmanandthesea.jpg",
                            Edition = "Scribner",
                            ISBN = "9780684801223",
                            Language = "English",
                            PublisherId = 3,
                            Status = 0,
                            Summary = "An aging Cuban fisherman struggles with a giant marlin far out in the Gulf Stream.",
                            Title = "The Old Man and the Sea",
                            Year = 1952
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 9,
                            CategoryId = 1,
                            CoverImage = "greatgatsby.jpg",
                            Edition = "Scribner",
                            ISBN = "9780743273565",
                            Language = "English",
                            PublisherId = 3,
                            Status = 0,
                            Summary = "A classic novel about the Jazz Age in the United States, narrated by Nick Carraway.",
                            Title = "The Great Gatsby",
                            Year = 1925
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 10,
                            CategoryId = 1,
                            CoverImage = "tokillamockingbird.jpg",
                            Edition = "Harper Perennial",
                            ISBN = "9780060935467",
                            Language = "English",
                            PublisherId = 2,
                            Status = 0,
                            Summary = "A gripping tale of racial injustice and childhood innocence in the American South.",
                            Title = "To Kill a Mockingbird",
                            Year = 1960
                        },
                        new
                        {
                            BookId = 11,
                            AuthorId = 11,
                            CategoryId = 6,
                            CoverImage = "thehobbit.jpg",
                            Edition = "Houghton Mifflin Harcourt",
                            ISBN = "9780547928227",
                            Language = "English",
                            PublisherId = 5,
                            Status = 0,
                            Summary = "Bilbo Baggins enjoys a comfortable, unambitious life until the wizard Gandalf chooses him to take part in an adventure.",
                            Title = "The Hobbit",
                            Year = 1937
                        },
                        new
                        {
                            BookId = 12,
                            AuthorId = 12,
                            CategoryId = 7,
                            CoverImage = "davincicode.jpg",
                            Edition = "Anchor Books",
                            ISBN = "9780307474278",
                            Language = "English",
                            PublisherId = 1,
                            Status = 0,
                            Summary = "A mystery thriller that follows symbologist Robert Langdon as he investigates a murder in the Louvre Museum.",
                            Title = "The Da Vinci Code",
                            Year = 2003
                        },
                        new
                        {
                            BookId = 13,
                            AuthorId = 13,
                            CategoryId = 1,
                            CoverImage = "thealchemist.jpg",
                            Edition = "HarperOne",
                            ISBN = "9780061122415",
                            Language = "English",
                            PublisherId = 2,
                            Status = 0,
                            Summary = "A young Andalusian shepherd travels from Spain to Egypt in search of a treasure buried near the Pyramids.",
                            Title = "The Alchemist",
                            Year = 1988
                        },
                        new
                        {
                            BookId = 14,
                            AuthorId = 14,
                            CategoryId = 1,
                            CoverImage = "onehundredyears.jpg",
                            Edition = "Harper Perennial",
                            ISBN = "9780060883287",
                            Language = "English",
                            PublisherId = 2,
                            Status = 0,
                            Summary = "The multi-generational story of the Buendía family, whose patriarch founded the town of Macondo.",
                            Title = "One Hundred Years of Solitude",
                            Year = 1967
                        },
                        new
                        {
                            BookId = 15,
                            AuthorId = 15,
                            CategoryId = 1,
                            CoverImage = "beloved.jpg",
                            Edition = "Vintage Books",
                            ISBN = "9781400033416",
                            Language = "English",
                            PublisherId = 1,
                            Status = 0,
                            Summary = "A novel about the supernatural effects of slavery and trauma on Sethe and her family.",
                            Title = "Beloved",
                            Year = 1987
                        });
                });

            modelBuilder.Entity("Library_Management_Sys.Models.BorrowTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BorrowTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowTransactionId");

                    b.HasIndex("MemberId");

                    b.ToTable("BorrowTransactions");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Science & Technology"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Arts & Literature"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "History & Biography"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Fantasy",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Mystery & Thriller",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Romance",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Science Fiction",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Horror",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Self-Help",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Business",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Health & Fitness",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 14,
                            Name = "Travel",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            CategoryId = 15,
                            Name = "Religion & Spirituality",
                            ParentCategoryId = 2
                        });
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Name = "Penguin Random House"
                        },
                        new
                        {
                            PublisherId = 2,
                            Name = "HarperCollins Publishers"
                        },
                        new
                        {
                            PublisherId = 3,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            PublisherId = 4,
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            PublisherId = 5,
                            Name = "Hachette Book Group"
                        },
                        new
                        {
                            PublisherId = 6,
                            Name = "Scholastic Corporation"
                        },
                        new
                        {
                            PublisherId = 7,
                            Name = "Wiley"
                        },
                        new
                        {
                            PublisherId = 8,
                            Name = "Pearson Education"
                        },
                        new
                        {
                            PublisherId = 9,
                            Name = "Oxford University Press"
                        },
                        new
                        {
                            PublisherId = 10,
                            Name = "Cambridge University Press"
                        });
                });

            modelBuilder.Entity("Library_Management_Sys.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Library_Management_Sys.Models.UserActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivityLogs", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a111111-1111-1111-1111-111111111111"),
                            ConcurrencyStamp = "1b111111-1111-1111-1111-111111111111",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2a222222-2222-2222-2222-222222222222"),
                            ConcurrencyStamp = "2b222222-2222-2222-2222-222222222222",
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = new Guid("3a333333-3333-3333-3333-333333333333"),
                            ConcurrencyStamp = "3b333333-3333-3333-3333-333333333333",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Library_Management_Sys.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library_Management_Sys.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Book", b =>
                {
                    b.HasOne("Library_Management_Sys.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Library_Management_Sys.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.BorrowTransaction", b =>
                {
                    b.HasOne("Library_Management_Sys.Models.Book", "book")
                        .WithMany("BorrowTransactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Library_Management_Sys.Models.BorrowTransaction", null)
                        .WithMany("BorrowTransactions")
                        .HasForeignKey("BorrowTransactionId");

                    b.HasOne("Library_Management_Sys.Models.Member", "member")
                        .WithMany("BorrowTransactions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("member");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Category", b =>
                {
                    b.HasOne("Library_Management_Sys.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.UserActivityLog", b =>
                {
                    b.HasOne("Library_Management_Sys.Models.User", "user")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Library_Management_Sys.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Library_Management_Sys.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library_Management_Sys.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Library_Management_Sys.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Book", b =>
                {
                    b.Navigation("BorrowTransactions");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.BorrowTransaction", b =>
                {
                    b.Navigation("BorrowTransactions");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Category", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Member", b =>
                {
                    b.Navigation("BorrowTransactions");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library_Management_Sys.Models.User", b =>
                {
                    b.Navigation("ActivityLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
